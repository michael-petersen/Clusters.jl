var documenterSearchIndex = {"docs":
[{"location":"index.html#Clusters.jl","page":"Home","title":"Clusters.jl","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"Clusters.jl is a package written in Julia to analyse spherical clusters, from analytical descriptions to n-body simulations.","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"","category":"page"},{"location":"index.html#Quick-activate","page":"Home","title":"Quick activate","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"In the main directory where you the package lives, enter the Julia environment (julia), then the package manager (]), then activate (activate .). To be extra safe, you can resolve to check for updates. Then return to the Julia interpreter ([backspace]): you are good to go with the latest version of the package! Import by typing using Clusters into the Julia interpreter.","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"","category":"page"},{"location":"index.html#Computing-numerical-frequencies","page":"Home","title":"Computing numerical frequencies","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"compute_frequencies_henon_ae(φ,dφ/dr,d²φ/dr²,a,e) return frequencies Ω₁ and Ω₂ for a given a,e (semi-major axis and eccentricity) + potential model using Henon anomaly. Will fall back to epicycle approximation when too close to circular.","category":"page"},{"location":"index.html#Basis-element-support","page":"Home","title":"Basis element support","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"potential_function(r,l,n,bc) return the Clutton-Brock potential basis element at (l,n)   density_function(r,l,n,bc) return the Clutton-Brock density basis element at (l,n)  ","category":"page"},{"location":"index.html#Specific-models","page":"Home","title":"Specific models","text":"","category":"section"},{"location":"index.html#Isochrone","page":"Home","title":"Isochrone","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"isochrone_psi(r,M=1,bc=1) return the isochrone potential   isochrone_dpsi_dr(r,M=1,bc=1) return the isochrone potential first derivative   isochrone_ddpsi_ddr(r,M=1,bc=1) return the isochrone potential second derivative  ","category":"page"},{"location":"index.html#Plummer","page":"Home","title":"Plummer","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"plummer_psi(r,M,bc=1) return the plummer potential  ","category":"page"},{"location":"index.html#Analysing-*n*-body-runs","page":"Home","title":"Analysing n-body runs","text":"","category":"section"},{"location":"index.html#reader-abilities","page":"Home","title":"reader abilities","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"return_particles(filename) reads in a delimited file to x,y,z,vx,vy,vz   return_density_centre(filename) reads in a centre file","category":"page"},{"location":"index.html#centring-support","page":"Home","title":"centring support","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"find_rbary(x,y,z) computes the barycentre and returns the radius for a given x,y,z series   find_rbary(x,y,z,xc,yc,zc) offsets series by xc,yc,zc and returns the radius for a given x,y,z series","category":"page"},{"location":"index.html#power-spectra-computation","page":"Home","title":"power spectra computation","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"crosscorrelation(x,y) computes the cross correlation of two density centre series à la Heggie.   perturbation_density(x,y,z,rmax,m=1) computes eq. 3 of Heggie (2020)   discrete_fourier_k(x,k) computes eq. 4 of Heggie (2020)","category":"page"},{"location":"index.html#escaper-analysis","page":"Home","title":"escaper analysis","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"plummer_potential(r,a=1) return the simplest possible Plummer potential   escaper_energy(x,y,z,vx,vy,vz) return the naive total energy (½v² + φ)   spherical_coordinates(x,y,z,vx,vy,vz) return the spherical positions and velocities","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"","category":"page"},{"location":"index.html#Author","page":"Home","title":"Author","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"Mike Petersen -  @michael-petersen - petersen@iap.fr","category":"page"}]
}
